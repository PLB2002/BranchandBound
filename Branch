def branch_and_bound_follower(self):
        """
        Optimises the follower location with branch and bound exactly according to Drezner et al. (2012).
        Includes correct backtracking, t(k) control and upper bound pruning.
        """
        self.follower_radii = np.copy(self.base_follower_radii)
        self.upper_bound_matrix = self.compute_upper_bound_matrix()

        all_sites = list(set(self.follower_sites) | (set(self.demand_points) - set(self.leader_sites)))
        p = len(all_sites)
        budget = self.follower_budget
        ε = 1e-5

        base_radius_dict = {site: 20 if site in self.follower_sites else 0 for site in all_sites}
        radius_options = {
            site: sorted(set(self.shortest_paths[site][i] for i in self.demand_points if
                             self.shortest_paths[site][i] > base_radius_dict[site]))
            for site in all_sites
        }
        expansion_cost_lookup = {
            (site, r): self.calculate_radius_expansion_cost(site, r, base_radius_dict[site])
            for site in all_sites
            for r in radius_options[site]
        }

        follower_solution = {site: base_radius_dict[site] for site in all_sites}
        Delta_star = self.evaluate_follower_market_share(follower_solution)
        best_solution = follower_solution.copy()

        t_vector = {site: -1 for site in all_sites}
        B0_vector = {site: 0 for site in all_sites}

        k = 0
        B0 = 0
        U_cache = {}

        while k >= 0:
            site_k = all_sites[k]
            base_radius = base_radius_dict[site_k]
            options = radius_options[site_k]
            t_k = t_vector[site_k]

            if t_k == -1:
                t_vector[site_k] = 0
                follower_solution[site_k] = base_radius

                Delta_k = self.evaluate_follower_market_share(follower_solution)
                remaining_budget = budget - B0
                h = min(int((self.upper_bound_matrix.shape[0] - 1) * (remaining_budget / budget)),
                        self.upper_bound_matrix.shape[0] - 1)
                u_key = (h, k)
                if u_key not in U_cache:
                    U_cache[u_key] = self.upper_bound_matrix[h, k]
                upper_bound = U_cache[u_key]

                if Delta_k + upper_bound <= Delta_star + ε:
                    t_vector[site_k] = -1
                    follower_solution[site_k] = base_radius
                    k -= 1
                    continue

                k += 1
                if k == p:
                    new_market_share = self.evaluate_follower_market_share(follower_solution)
                    if new_market_share > Delta_star:
                        Delta_star = new_market_share
                        best_solution = follower_solution.copy()
                    k -= 1
                continue

            t_k += 1
            if t_k >= len(options):
                t_vector[site_k] = -1
                if B0_vector[site_k] > 0:
                    B0 -= B0_vector[site_k]
                    B0_vector[site_k] = 0
                follower_solution[site_k] = base_radius
                k -= 1
                continue
            else:
                k -= 1

            new_radius = options[t_k]
            prev_radius = follower_solution[site_k]
            prev_cost = self.calculate_radius_expansion_cost(site_k, prev_radius, base_radius)
            new_cost = expansion_cost_lookup[(site_k, new_radius)]
            incremental_cost = new_cost - prev_cost

            if B0 + incremental_cost > budget:
                t_vector[site_k] = -1
                if B0_vector[site_k] > 0:
                    B0 -= B0_vector[site_k]
                    B0_vector[site_k] = 0
                follower_solution[site_k] = base_radius
                k -= 1
                continue

            t_vector[site_k] = t_k
            follower_solution[site_k] = new_radius
            B0 -= B0_vector[site_k]
            B0_vector[site_k] = new_cost
            B0 += new_cost

            Delta_k = self.evaluate_follower_market_share(follower_solution)
            remaining_budget = budget - B0
            h = min(int((self.upper_bound_matrix.shape[0] - 1) * (remaining_budget / budget)),
                    self.upper_bound_matrix.shape[0] - 1)
            u_key = (h, k)
            if u_key not in U_cache:
                U_cache[u_key] = self.upper_bound_matrix[h, k]
            upper_bound = U_cache[u_key]
            if Delta_k + upper_bound <= Delta_star + ε:
                k -= 1
                continue

            if Delta_k > Delta_star:
                Delta_star = Delta_k
                best_solution = follower_solution.copy()

            k += 1


        return best_solution
